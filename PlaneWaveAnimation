import plotly.graph_objects as go
import numpy as np
import plotly.io as pio
pio.renderers.default='browser'

# visualization variables
trace = 1
y1D = 0

# diagnostic plots
vplot = 1

# field variables
EMax = 30
std = 0.3
start = -1/std**2
c = 1
k = 10
w = k*c

# particle variables
m = 1
q = 1
v_0 = 0
x_0 = 1

# computation variables
N = 5000 #number of frames max=1000
timeMax = 10 # timeMax*c = 2xMax
xMax = 5 # xMax = c/2 * timeMax
xSteps = 2000
yDownscale = 1 # scaling down y so that it appears on the window
Cmax = 0.5
NStep = 10 #this is how we step over frames to reduce runtime generating animations

if trace:
    y1D = 0
dx = xMax/xSteps
dt = (Cmax*dx) # dt = 0.5*dx
timeSteps = int(timeMax/dt) #for use in linspace
N = (timeSteps) #number of frames


def E0(EMax, r, c, std):
    gauss = np.empty_like(r)
    for i in range(np.shape(r)[0]):
        center = (c*dt*i)+start
        gauss[i,:] = EMax*np.exp(-((r[i,:]-center)**2)/2*std**2)
#    gauss = np.ones_like(gauss)
    return gauss

def planeWave(EMax, std, k, w, r, t):
    
    print(np.size(r))
    print(np.size(t))
    
    rr = np.empty((len(t),len(r)))
    for i in range(len(t)):
        rr[i,:] = r
    
    tt = np.empty((len(r),len(t)))
    print(np.shape(rr))
    print(np.shape(tt))
    for i in range(len(r)):
        tt[i,:] = t
    tt = np.transpose(tt)
    
    E_0 = E0(EMax, rr, w/k, std)
    return E_0*np.cos(k*rr-w*tt), E_0


def particle(t, E, v_0, x_0, q):
    # Moving particle
    x = np.empty(len(t))
    y = np.zeros(len(t))
    vx = np.zeros(len(t))
    vy = np.zeros(len(t))
    
    x[0] = x_0
    y[0] = 0
    vx[0] = v_0
    vy[0] = 0
    
    ## Offsetting v by -0.5 dt for leapfrog method only using E field
    E_interp = np.interp(x[0], r, E[0, :])    
    aE = (q/m) * E_interp
    vy[0] -= 0.5 * aE * dt
            
    flag = 1
    for i in range(len(t)-1):
        if(x[i]<=xMax):
            
            # Finding field at full steps
            E_interp = np.interp(x[i], r, E[i, :])
            B = np.interp(x[i], r, E[i, :]) / c
            
            # Computing electric field acceleration
            aE = (q/m) * E_interp
            
            # Computing B field acceleration
            v = np.array([vx[i], vy[i], 0])
            B = np.array([0, 0, B])
            a = (q/m)*np.cross(v, B)
            
            # Putting E and B together for x and y accelerations at full steps
            ax = a[0]
            ay = aE + a[1]
            
            # Pushing velocity a half-step
            vxHalf = vx[i] + 0.5*(ax*dt)
            vyHalf = vy[i] + 0.5*(ay*dt) #v=at
            
            # Pushing position a full step
            x[i+1] = x[i]+(vxHalf*dt)
            y[i+1] = y[i]+(vyHalf*dt)
            
            # Pushing velocity another half-step so that v and r are both at a full step at the end of each loop
            vx[i+1] = vxHalf + 0.5*(ax*dt)
            vy[i+1] = vyHalf + 0.5*(ay*dt)
            
            if i==len(t)-2:
                vxlist = vx[:i]
                vylist = vy[:i]
            
        else:
            
            # If the particle goes off the screen, we want to truncate all other velocities and pin the particle to avoid errors in interp
            x[i+1] = x[i]
            y[i+1] = y[i]
            
            if flag: 
                vxlist = vx[:i]
                vylist = vy[:i]
                flag = 0
        
    print(x[i+1])
    print(y[i+1])
    
    if y1D:
        y = np.zeros_like(y)
    
    return x, y, vxlist, vylist

def ponderomotiveParticle(t, E, v_0, x_0, E_0):
    # Moving particle ponderomotive
    # Moving particle
    yp = 0
    vp = v_0
    xp = np.empty(len(t))
    yp = np.zeros(len(t))
    xp[0] = x_0
    
    gradE = np.zeros_like(E_0)
    for i in range(len(t)):
        gradE[i,:] = np.gradient(np.power(E_0[i,:], 2))*(1/dx)

    for i in range(len(t)-1):
        if(xp[i]>xMax):
           ap=0
           vp=0
        else:
           ap = -((q**2)/(4.0 * w**2.0 * m**2.0))* gradE[i,int(xp[i]/dx)] #a=qE/m
           vp = vp + ap*(dt) #v=at
           yp[i] = 0
        xp[i+1] = xp[i] + vp*(dt)
    print(xp[i+1])
    return xp, yp, gradE

#tt = np.linspace(0, timeMax, compStep)
t = np.linspace(0, timeMax, timeSteps)
r = np.linspace(0, xMax, xSteps)
E, E_0 = planeWave(EMax, std, k, w, r, t)
print(np.size(E))

# Creating and tracing particles
x, y, vx, vy = particle(t, E, v_0, x_0,q)
x2, y2, vx2, vy2 = particle(t, E, v_0, x_0,q-0.1)
x3, y3, vx3, vy3 = particle(t, E, v_0, x_0,q+0.1)
xp, yp, gradE = ponderomotiveParticle(t, E, v_0, x_0, E_0)
gradEx = r[::NStep]
gradE = gradE[:,::NStep]

#x = tt + tt ** 2
#y = tt - tt ** 2
#s = np.linspace(-1, 1, N)
#xx = s + s ** 2
#yy = s - s ** 2

# Setting window domain
wDownscale = 1 # scaling down y so that it appears on the form
E = E*(1/np.max(np.abs(E)))
gradE = gradE*(1/np.max(np.abs(gradE)))
print(np.max(np.abs(gradE)))
print(np.max(abs(E)))
print('hello')
xm = np.min(r)
xM = np.max(r)
ym = np.min(E)*wDownscale
yM = np.max(E)*wDownscale

# Velocity window domain
vxm = np.min(vx)
vxM = np.max(vx)
vym = np.min(vy)
vyM = np.max(vy)

print(int((min(len(vx),len(vy))/NStep))-2)
print(len(vx))

#####Graphing######
if vplot:
    vfig = go.Figure(
        data=[go.Scatter(x=vx[:], y=vy[:],
            mode="lines",
            line=dict(width=2, color="navy"))])
    vfig.update_layout(width=800, height=800,
            xaxis=dict(range=[vxm, vxM], autorange=False, zeroline=False),
            yaxis=dict(range=[vym, vyM], autorange=False, zeroline=False),
            title_text="Plane Wave Ponderomotive Forces Velocity", title_x=0.5,
            updatemenus = [dict(type = "buttons",
            buttons = [
                dict(
                    args = [None, {"frame": {"duration": 10, "redraw": False},
                                    "fromcurrent": True, "transition": {"duration": 10}}],
                    label = "Play",
                    method = "animate",
    
                    )])])
    vfig.update(frames=[go.Frame(
                            data=[go.Scatter(x=vx[:(k+1)*NStep],y=vy[:(k+1)*NStep])],
                            traces=[0]
                            ) # fig.data[1] is updated by each frame
            for k in range(int((min(len(vx),len(vy))/NStep))-2)])
    vfig.show()

if trace:
    mode = 'lines'
    fig = go.Figure(
        data=[go.Scatter(x=r, y=E[0,],
                         mode="lines",
                         line=dict(width=2, color="navy")),
              go.Scatter(x=gradEx, y=gradE[0,],
                         mode="lines",
                         line=dict(width=2, color="cornflowerblue")),
              go.Scatter(x=x[:], y=y[:],
                         mode=mode,
                         line=dict(width=2, color="red")),
              go.Scatter(x=x2[:], y=y2[:],
                         mode=mode,
                         line=dict(width=2, color="crimson")),
              go.Scatter(x=x3[:], y=y3[:],
                         mode=mode,
                         line=dict(width=2, color="crimson")),
              go.Scatter(x=xp[:], y=yp[:],
                         mode=mode,
                         line=dict(width=2, color="green")),
              go.Scatter(x=[x[0]], y=[0],
                         mode='markers',
                         marker=dict(color="red", size=8)),
              go.Scatter(x=[x2[0]], y=[0],
                         mode='markers',
                         marker=dict(color="crimson", size=8)),
              go.Scatter(x=[x3[0]], y=[0],
                         mode='markers',
                         marker=dict(color="crimson", size=8)),
              go.Scatter(x=[xp[0]], y=[yp],
                         mode='markers',
                         marker=dict(color="green", size=8))])
else:
    mode = 'markers'
    fig = go.Figure(
        data=[go.Scatter(x=r, y=E[0,],
                         mode="lines",
                         line=dict(width=2, color="navy")),
              go.Scatter(x=gradEx, y=gradE[0,],
                         mode="lines",
                         line=dict(width=2, color="cornflowerblue")),
              go.Scatter(x=[x[0]], y=[y[0]],
                         mode=mode,
                         marker=dict(color="red", size=4)),
              go.Scatter(x=[x2[0]], y=[y2[0]],
                         mode=mode,
                         marker=dict(color="crimson", size=4)),
              go.Scatter(x=[x3[0]], y=[y3[0]],
                         mode=mode,
                         marker=dict(color="crimson", size=4)),
              go.Scatter(x=[xp[0]], y=[yp],
                         mode=mode,
                         marker=dict(color="green", size=4))])
fig.update_layout(width=1200, height=500,
        xaxis=dict(range=[xm, xM], autorange=False, zeroline=False),
        yaxis=dict(range=[ym, yM], autorange=False, zeroline=False),
        title_text="Plane Wave Ponderomotive Forces", title_x=0.5,
        updatemenus = [dict(type = "buttons",
        buttons = [
            dict(
                args = [None, {"frame": {"duration": 10, "redraw": False},
                                "fromcurrent": True, "transition": {"duration": 10}}],
                label = "Play",
                method = "animate",

                )])])

if trace:
    fig.update(frames=[go.Frame(
                            data=[go.Scatter(x=r,y=E[k*NStep,]), go.Scatter(x=gradEx,y=gradE[k*NStep,]), go.Scatter(x=x[:k*NStep],y=y[:k*NStep]/yDownscale), go.Scatter(x=x2[:k*NStep],y=y2[:k*NStep]/yDownscale), go.Scatter(x=x3[:k*NStep],y=y3[:k*NStep]/yDownscale), go.Scatter(x=xp[:k*NStep],y=yp[:k*NStep]), go.Scatter(x=[x[k*NStep]],y=[0/yDownscale]), go.Scatter(x=[x2[k*NStep]],y=[0/yDownscale]), go.Scatter(x=[x3[k*NStep]],y=[0/yDownscale]), go.Scatter(x=[xp[k*NStep]],y=[yp[k*NStep]])],
                            traces=[0,1,2,3,4,5,6,7,8,9]
                            ) # fig.data[1] is updated by each frame
            for k in range(int(N/NStep))])

else:
    fig.update(frames=[go.Frame(
                            data=[go.Scatter(x=r,y=E[k*NStep,]), go.Scatter(x=gradEx,y=gradE[k*NStep,]), go.Scatter(x=[x[k*NStep]],y=[y[k*NStep]/yDownscale]), go.Scatter(x=[x2[k*NStep]],y=[y2[k*NStep]/yDownscale]), go.Scatter(x=[x3[k*NStep]],y=[y3[k*NStep]/yDownscale]), go.Scatter(x=[xp[k*NStep]],y=[yp[k*NStep]])],
                            traces=[0,1,2,3,4,5]
                            ) # fig.data[1] is updated by each frame
            for k in range(int(N/NStep))])

fig.show()

import plotly.graph_objects as go
import numpy as np
import plotly.io as pio
pio.renderers.default='browser'

# visualization variables
trace = 0

# field variables
EMax = 5
std = 0.3
start = -1/std**2
k = 10
w = 0.5
mue_0 = 376.73431

# particle variables
m = 1
q = 1
v_0 = 0
x_0 = 1

# computation variables
N = 5000 #number of frames max=1000
timeMax = 200
xMax = 5
timeStep = 4000 #for use in linspace
xStep = 10000
yDownscale = 10 # scaling down y so that it appears on the form
timeIncr = timeMax/timeStep
xIncr = xMax/xStep
N = int(timeStep) #number of frames
NStep = 16 #this is how we step over frames


def E0(EMax, r, c, std):
    gauss = np.empty_like(r)
    for i in range(np.shape(r)[0]):
        center = (c*timeIncr*i)+start
        gauss[i,:] = EMax*np.exp(-((r[i,:]-center)**2)/2*std**2)
#    gauss = np.ones_like(gauss)
    return gauss

def planeWave(EMax, std, k, w, r, t):
    
    print(np.size(r))
    print(np.size(t))
    
    rr = np.empty((len(t),len(r)))
    for i in range(len(t)):
        rr[i,:] = r
    
    tt = np.empty((len(r),len(t)))
    print(np.shape(rr))
    print(np.shape(tt))
    for i in range(len(r)):
        tt[i,:] = t
    tt = np.transpose(tt)
    
    E_0 = E0(EMax, rr, w/k, std)
    return E_0*np.cos(k*rr-w*tt), E_0

def particle(t, E, v_0, x_0, q):
    # Moving particle
    y = 0
    vx = v_0
    vy = 0
    x = np.empty(len(t))
    y = np.zeros(len(t))
    x[0] = x_0
    y[0] = 0
    for i in range(len(t)-1):
        if(x[i]>xMax):
           ay=0
           vy=0
           ax=0
           vx=0
        else:
            E_interp = np.interp(x[i], r, E[i, :])  
            ay = (q/m) * E_interp
            B = np.interp(x[i], r, E[i, :]) / mue_0
#            B = E[i,int(x[i]/xIncr)]/mue_0
            
            v = np.array([vx, vy, 0])
            B = np.array([0, 0, B])
            a = (q/m)*np.cross(v, B)
            ax = a[0]
            ay = ay + a[1]
            
            vy = vy + (ay*(timeIncr)) #v=at
            vx = vx + (ax*(timeIncr))
        y[i+1] = y[i]+(vy*(timeIncr))
        x[i+1] = x[i]+(vx*(timeIncr))
    print(x[i+1])
    print(y[i+1])
    return x, y

def ponderomotiveParticle(t, E, v_0, x_0, E_0):
    # Moving particle ponderomotive
    # Moving particle
    yp = 0
    vp = v_0
    xp = np.empty(len(t))
    yp = np.zeros(len(t))
    xp[0] = x_0
    
    gradE = np.zeros_like(E_0)
    for i in range(len(t)):
        gradE[i,:] = np.gradient(np.power(E_0[i,:], 2))*(1/xIncr)

    for i in range(len(t)-1):
        if(xp[i]>xMax):
           ap=0
           vp=0
        else:
           ap = -((q**2)/(4.0 * w**2.0 * m**2.0))* gradE[i,int(xp[i]/xIncr)]/1000 #a=qE/m
           vp = vp + ap*(timeIncr) #v=at
           yp[i] = 0
        xp[i+1] = xp[i] + vp*(timeIncr)
    print(xp[i+1])
    return xp, yp, gradE

#tt = np.linspace(0, timeMax, compStep)
t = np.linspace(0, timeMax, timeStep)
r = np.linspace(0, xMax, xStep)
E, E_0 = planeWave(EMax, std, k, w, r, t)
print(np.size(E))

# Creating and tracing particles
x, y = particle(t, E, v_0, x_0,q)
x2, y2 = particle(t, E, v_0, x_0,0.9)
x3, y3 = particle(t, E, v_0, x_0,1.1)
xp, yp, gradE = ponderomotiveParticle(t, E, v_0, x_0, E_0)
gradEx = r[::NStep]
gradE = gradE[:,::NStep]



#x = tt + tt ** 2
#y = tt - tt ** 2
#s = np.linspace(-1, 1, N)
#xx = s + s ** 2
#yy = s - s ** 2

# Setting window domain
wDownscale = 10 # scaling down y so that it appears on the form
xm = np.min(r)
xM = np.max(r)
ym = np.min(E)*wDownscale
yM = np.max(E)*wDownscale

mode = 'markers'
fig = go.Figure(
    data=[go.Scatter(x=r, y=E[0,],
                     mode="lines",
                     line=dict(width=2, color="navy")),
          go.Scatter(x=gradEx, y=gradE[0,],
                     mode="lines",
                     line=dict(width=2, color="cornflowerblue")),
          go.Scatter(x=[x[0]], y=[y[0]],
                     mode=mode,
                     marker=dict(color="red", size=4)),
          go.Scatter(x=[x2[0]], y=[y2[0]],
                     mode=mode,
                     marker=dict(color="red", size=4)),
          go.Scatter(x=[x3[0]], y=[y3[0]],
                     mode=mode,
                     marker=dict(color="red", size=4)),
          go.Scatter(x=[xp[0]], y=[yp],
                     mode=mode,
                     marker=dict(color="green", size=4))])
fig.update_layout(width=1200, height=500,
        xaxis=dict(range=[xm, xM], autorange=False, zeroline=False),
        yaxis=dict(range=[ym, yM], autorange=False, zeroline=False),
        title_text="Plane Wave Pondermotive Forces", title_x=0.5,
        updatemenus = [dict(type = "buttons",
        buttons = [
            dict(
                args = [None, {"frame": {"duration": 10, "redraw": False},
                                "fromcurrent": True, "transition": {"duration": 10}}],
                label = "Play",
                method = "animate",

                )])])

if trace:
    fig.update(frames=[go.Frame(
                            data=[go.Scatter(x=r,y=E[k*NStep,]), go.Scatter(x=gradEx,y=gradE[k*NStep,]), go.Scatter(x=[x[:k*NStep]],y=[y[:k*NStep]/yDownscale]), go.Scatter(x=[x2[:k*NStep]],y=[y2[:k*NStep]/yDownscale]), go.Scatter(x=[x3[:k*NStep]],y=[y3[:k*NStep]/yDownscale]), go.Scatter(x=[xp[:k*NStep]],y=[yp[:k*NStep]])],
                            traces=[0,1,2,3,4,5]
                            ) # fig.data[1] is updated by each frame
            for k in range(int(N/NStep))])

else:
    fig.update(frames=[go.Frame(
                            data=[go.Scatter(x=r,y=E[k*NStep,]), go.Scatter(x=gradEx,y=gradE[k*NStep,]), go.Scatter(x=[x[k*NStep]],y=[y[k*NStep]/yDownscale]), go.Scatter(x=[x2[k*NStep]],y=[y2[k*NStep]/yDownscale]), go.Scatter(x=[x3[k*NStep]],y=[y3[k*NStep]/yDownscale]), go.Scatter(x=[xp[k*NStep]],y=[yp[k*NStep]])],
                            traces=[0,1,2,3,4,5]
                            ) # fig.data[1] is updated by each frame
            for k in range(int(N/NStep))])

fig.show()
